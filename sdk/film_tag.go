
// FilmTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app



import (
    
    "encoding/json"
    "errors"
    "fmt"
    
    "io"
    "net/http"
    "net/url"
    
)

type FilmTag struct {
    internal *sdkgen.TagAbstract
}



// GetAll Get all the films
func (client *FilmTag) GetAll(search string) (FilmCollection, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["search"] = search

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/films", pathParams))
    if err != nil {
        return FilmCollection{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return FilmCollection{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return FilmCollection{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return FilmCollection{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data FilmCollection
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    return FilmCollection{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Get Get a specific film
func (client *FilmTag) Get(id string) (Film, error) {
    pathParams := make(map[string]interface{})
    pathParams["id"] = id

    queryParams := make(map[string]interface{})

    var queryStructNames []string

    u, err := url.Parse(client.internal.Parser.Url("/films/:id", pathParams))
    if err != nil {
        return Film{}, err
    }

    u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return Film{}, err
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return Film{}, err
    }

    defer resp.Body.Close()

    respBody, err := io.ReadAll(resp.Body)
    if err != nil {
        return Film{}, err
    }

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        var data Film
        err := json.Unmarshal(respBody, &data)

        return data, err
    }

    var statusCode = resp.StatusCode
    return Film{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}




func NewFilmTag(httpClient *http.Client, parser *sdkgen.Parser) *FilmTag {
	return &FilmTag{
        internal: &sdkgen.TagAbstract{
            HttpClient: httpClient,
            Parser: parser,
        },
	}
}
